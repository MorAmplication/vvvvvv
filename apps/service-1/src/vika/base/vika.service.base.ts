/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Vika as PrismaVika, Mor as PrismaMor } from "@prisma/client";

export class VikaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VikaCountArgs, "select">): Promise<number> {
    return this.prisma.vika.count(args);
  }

  async vikas(args: Prisma.VikaFindManyArgs): Promise<PrismaVika[]> {
    return this.prisma.vika.findMany(args);
  }
  async vika(args: Prisma.VikaFindUniqueArgs): Promise<PrismaVika | null> {
    return this.prisma.vika.findUnique(args);
  }
  async createVika(args: Prisma.VikaCreateArgs): Promise<PrismaVika> {
    return this.prisma.vika.create(args);
  }
  async updateVika(args: Prisma.VikaUpdateArgs): Promise<PrismaVika> {
    return this.prisma.vika.update(args);
  }
  async deleteVika(args: Prisma.VikaDeleteArgs): Promise<PrismaVika> {
    return this.prisma.vika.delete(args);
  }

  async getMor(parentId: string): Promise<PrismaMor | null> {
    return this.prisma.vika
      .findUnique({
        where: { id: parentId },
      })
      .mor();
  }
}
